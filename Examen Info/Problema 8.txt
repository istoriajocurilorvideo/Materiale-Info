#include <stdio.h>
#include <stdlib.h>
int** inmultire(int** m_s, int** m_i) {

}
int** matriceInferior(int marime_matrice) {
    int** m;
    int iterator, iterator2;
    free(m);

    //Alocare memorie
    m=(int**)malloc(marime_matrice * sizeof(int*));
    for(iterator = 0; iterator < marime_matrice; iterator++) {
        *(m+iterator) = (int*)malloc((iterator+1) * sizeof(int));
    }

    //Citire matrice
    for(iterator = 0; iterator < marime_matrice; iterator++) {
        for(iterator2 = 0; iterator2 < iterator+1; iterator2++) {
            printf("Introducei elementul [%d][%d] din matricea inferioara: ", iterator+1, iterator2+1);
            scanf("%d", &m[iterator][iterator2]);
        }
    }
    return m;

}
int** matriceSuperioara(int marime_matrice) {
    int** m;
    int iterator, iterator2;

    //Alocare memorie
    m=(int**)malloc(marime_matrice * sizeof(int*));
    for(iterator = 0; iterator < marime_matrice; iterator++) {
        *(m+iterator) = (int*)malloc((marime_matrice - iterator) * sizeof(int));
    }
    //Citire matrice
    for(iterator = 0; iterator < marime_matrice; iterator++) {
        for(iterator2 = iterator; iterator2 < marime_matrice; iterator2++) {
            printf("Introduceti elementul [%d][%d] al matricei superioare: ", iterator+1, iterator2+1);
            scanf("%d", &m[iterator][iterator2-iterator]);
        }
    }
    return m;
}
int main()
{
    int **m_i, **m_s, **m_p;
    int marime_matrice, iterator, iterator2, iterator3, suma;

    printf("Introduceti marimea matricilor: "); scanf("%d", &marime_matrice);

    m_i=(int**)malloc(marime_matrice * sizeof(int*)); //Alocare memorie pentru liniile matricii inferioare
    m_s=(int**)malloc(marime_matrice * sizeof(int*)); //Alocare memorie pentru liniile matricii superioare
    m_p=(int**)malloc(marime_matrice * sizeof(int*)); //Alocare memorie pentru liniile matricii produs
    for(iterator = 0; iterator < marime_matrice; iterator++) {
        *(m_i+iterator) = (int*)malloc((iterator+1) * sizeof(int));                //Alocare memorie pentru elementele de pe liniile m_i
        *(m_s+iterator) = (int*)malloc((marime_matrice - iterator) * sizeof(int)); //Alocare memorie pentru elementele de pe liniile m_s
        *(m_p+iterator) = (int*)malloc(marime_matrice * sizeof(int));             //Alocare memorie pentru elementele de pe liiniile m_p
    }
    m_i = matriceInferior(marime_matrice);
    m_s = matriceSuperioara(marime_matrice);

    for(iterator = 0; iterator < marime_matrice; iterator++) {
        for(iterator2 = 0; iterator2 < marime_matrice; iterator2++) {
            for(iterator3 = 0; iterator3 < marime_matrice; iterator3++) {
                if(iterator3 < iterator+1 && iterator3 < iterator2+1) {
                    m_p[iterator][iterator2] += m_i[iterator][iterator3] * m_s[iterator3][iterator2];
                }
            }
        }
    }
    for(iterator = 0; iterator < marime_matrice; iterator++) for(iterator2=0;iterator2 < marime_matrice;iterator2++) printf("%d ", m_p[iterator][iterator2]);
    return 0;
}
